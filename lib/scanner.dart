// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final ffi.Pointer<T> Function<T extends ffi.NativeType>(String sym) jniLookup =
    ProtectedJniExtensions.initGeneratedLibrary("scanner");

/// from: ao.marco_domingos.scanner_api_example.Scanner
class Scanner extends jni.JObject {
  @override
  late final jni.JObjType<Scanner> $type = type;

  Scanner.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ScannerType();
  static final _ctor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Scanner__ctor")
          .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Scanner() {
    return Scanner.fromRef(_ctor().object);
  }

  static final _getCode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Scanner__getCode")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.Object getCode(android.content.Context context, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JString> getCode(
    jni.JObject context,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromRef(jni.Jni.newPortContinuation($p));
    _getCode(reference, context.reference, $c.reference).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = const jni.JStringType().getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return const jni.JStringType().fromRef($o);
  }

  static final _await0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Scanner__await0")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.Object await(com.google.android.gms.tasks.Task task, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<$T> await0<$T extends jni.JObject>(
    Task<$T> task, {
    jni.JObjType<$T>? T,
  }) async {
    T ??= jni.lowestCommonSuperType([
      (task.$type as $TaskType).TResult,
    ]) as jni.JObjType<$T>;
    final $p = ReceivePort();
    final $c = jni.JObject.fromRef(jni.Jni.newPortContinuation($p));
    _await0(reference, task.reference, $c.reference).object;
    final $o = jni.JObjectPtr.fromAddress(await $p.first);
    final $k = T.getClass().reference;
    if (!jni.Jni.env.IsInstanceOf($o, $k)) {
      throw "Failed";
    }
    return T.fromRef($o);
  }
}

class $ScannerType extends jni.JObjType<Scanner> {
  const $ScannerType();

  @override
  String get signature => r"Lao/marco_domingos/scanner_api_example/Scanner;";

  @override
  Scanner fromRef(jni.JObjectPtr ref) => Scanner.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ScannerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScannerType) && other is $ScannerType;
  }
}

/// from: com.google.mlkit.vision.codescanner.GmsBarcodeScanning
class GmsBarcodeScanning extends jni.JObject {
  @override
  late final jni.JObjType<GmsBarcodeScanning> $type = type;

  GmsBarcodeScanning.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $GmsBarcodeScanningType();
  static final _getClient = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("GmsBarcodeScanning__getClient")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.mlkit.vision.codescanner.GmsBarcodeScanner getClient(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static GmsBarcodeScanner getClient(
    jni.JObject context,
  ) {
    return const $GmsBarcodeScannerType()
        .fromRef(_getClient(context.reference).object);
  }

  static final _getClient1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("GmsBarcodeScanning__getClient1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.mlkit.vision.codescanner.GmsBarcodeScanner getClient(android.content.Context context, com.google.mlkit.vision.codescanner.GmsBarcodeScannerOptions gmsBarcodeScannerOptions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static GmsBarcodeScanner getClient1(
    jni.JObject context,
    jni.JObject gmsBarcodeScannerOptions,
  ) {
    return const $GmsBarcodeScannerType().fromRef(
        _getClient1(context.reference, gmsBarcodeScannerOptions.reference)
            .object);
  }
}

class $GmsBarcodeScanningType extends jni.JObjType<GmsBarcodeScanning> {
  const $GmsBarcodeScanningType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/codescanner/GmsBarcodeScanning;";

  @override
  GmsBarcodeScanning fromRef(jni.JObjectPtr ref) =>
      GmsBarcodeScanning.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GmsBarcodeScanningType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GmsBarcodeScanningType) &&
        other is $GmsBarcodeScanningType;
  }
}

/// from: com.google.mlkit.vision.codescanner.GmsBarcodeScanner
class GmsBarcodeScanner extends jni.JObject {
  @override
  late final jni.JObjType<GmsBarcodeScanner> $type = type;

  GmsBarcodeScanner.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $GmsBarcodeScannerType();
  static final _startScan = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("GmsBarcodeScanner__startScan")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.android.gms.tasks.Task startScan()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<Barcode> startScan() {
    return const $TaskType($BarcodeType())
        .fromRef(_startScan(reference).object);
  }
}

class $GmsBarcodeScannerType extends jni.JObjType<GmsBarcodeScanner> {
  const $GmsBarcodeScannerType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/codescanner/GmsBarcodeScanner;";

  @override
  GmsBarcodeScanner fromRef(jni.JObjectPtr ref) =>
      GmsBarcodeScanner.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GmsBarcodeScannerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GmsBarcodeScannerType) &&
        other is $GmsBarcodeScannerType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.Barcode
class Barcode extends jni.JObject {
  @override
  late final jni.JObjType<Barcode> $type = type;

  Barcode.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $BarcodeType();

  /// from: static public final int FORMAT_UNKNOWN
  static const FORMAT_UNKNOWN = -1;

  /// from: static public final int FORMAT_ALL_FORMATS
  static const FORMAT_ALL_FORMATS = 0;

  /// from: static public final int FORMAT_CODE_128
  static const FORMAT_CODE_128 = 1;

  /// from: static public final int FORMAT_CODE_39
  static const FORMAT_CODE_39 = 2;

  /// from: static public final int FORMAT_CODE_93
  static const FORMAT_CODE_93 = 4;

  /// from: static public final int FORMAT_CODABAR
  static const FORMAT_CODABAR = 8;

  /// from: static public final int FORMAT_DATA_MATRIX
  static const FORMAT_DATA_MATRIX = 16;

  /// from: static public final int FORMAT_EAN_13
  static const FORMAT_EAN_13 = 32;

  /// from: static public final int FORMAT_EAN_8
  static const FORMAT_EAN_8 = 64;

  /// from: static public final int FORMAT_ITF
  static const FORMAT_ITF = 128;

  /// from: static public final int FORMAT_QR_CODE
  static const FORMAT_QR_CODE = 256;

  /// from: static public final int FORMAT_UPC_A
  static const FORMAT_UPC_A = 512;

  /// from: static public final int FORMAT_UPC_E
  static const FORMAT_UPC_E = 1024;

  /// from: static public final int FORMAT_PDF417
  static const FORMAT_PDF417 = 2048;

  /// from: static public final int FORMAT_AZTEC
  static const FORMAT_AZTEC = 4096;

  /// from: static public final int TYPE_UNKNOWN
  static const TYPE_UNKNOWN = 0;

  /// from: static public final int TYPE_CONTACT_INFO
  static const TYPE_CONTACT_INFO = 1;

  /// from: static public final int TYPE_EMAIL
  static const TYPE_EMAIL = 2;

  /// from: static public final int TYPE_ISBN
  static const TYPE_ISBN = 3;

  /// from: static public final int TYPE_PHONE
  static const TYPE_PHONE = 4;

  /// from: static public final int TYPE_PRODUCT
  static const TYPE_PRODUCT = 5;

  /// from: static public final int TYPE_SMS
  static const TYPE_SMS = 6;

  /// from: static public final int TYPE_TEXT
  static const TYPE_TEXT = 7;

  /// from: static public final int TYPE_URL
  static const TYPE_URL = 8;

  /// from: static public final int TYPE_WIFI
  static const TYPE_WIFI = 9;

  /// from: static public final int TYPE_GEO
  static const TYPE_GEO = 10;

  /// from: static public final int TYPE_CALENDAR_EVENT
  static const TYPE_CALENDAR_EVENT = 11;

  /// from: static public final int TYPE_DRIVER_LICENSE
  static const TYPE_DRIVER_LICENSE = 12;

  static final _getFormat = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getFormat")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getFormat()
  int getFormat() {
    return _getFormat(reference).integer;
  }

  static final _getValueType = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getValueType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getValueType()
  int getValueType() {
    return _getValueType(reference).integer;
  }

  static final _getBoundingBox = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getBoundingBox")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Rect getBoundingBox()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getBoundingBox() {
    return const jni.JObjectType().fromRef(_getBoundingBox(reference).object);
  }

  static final _getCalendarEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getCalendarEvent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$CalendarEvent getCalendarEvent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getCalendarEvent() {
    return const jni.JObjectType().fromRef(_getCalendarEvent(reference).object);
  }

  static final _getContactInfo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getContactInfo")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$ContactInfo getContactInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getContactInfo() {
    return const jni.JObjectType().fromRef(_getContactInfo(reference).object);
  }

  static final _getDriverLicense = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getDriverLicense")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$DriverLicense getDriverLicense()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getDriverLicense() {
    return const jni.JObjectType().fromRef(_getDriverLicense(reference).object);
  }

  static final _getEmail = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getEmail")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$Email getEmail()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getEmail() {
    return const jni.JObjectType().fromRef(_getEmail(reference).object);
  }

  static final _getGeoPoint = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getGeoPoint")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$GeoPoint getGeoPoint()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getGeoPoint() {
    return const jni.JObjectType().fromRef(_getGeoPoint(reference).object);
  }

  static final _getPhone = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getPhone")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$Phone getPhone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getPhone() {
    return const jni.JObjectType().fromRef(_getPhone(reference).object);
  }

  static final _getSms = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Barcode__getSms")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$Sms getSms()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getSms() {
    return const jni.JObjectType().fromRef(_getSms(reference).object);
  }

  static final _getUrl = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Barcode__getUrl")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$UrlBookmark getUrl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getUrl() {
    return const jni.JObjectType().fromRef(_getUrl(reference).object);
  }

  static final _getWifi = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getWifi")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.common.Barcode$WiFi getWifi()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getWifi() {
    return const jni.JObjectType().fromRef(_getWifi(reference).object);
  }

  static final _getDisplayValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getDisplayValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getDisplayValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getDisplayValue() {
    return const jni.JStringType().fromRef(_getDisplayValue(reference).object);
  }

  static final _getRawValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getRawValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getRawValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getRawValue() {
    return const jni.JStringType().fromRef(_getRawValue(reference).object);
  }

  static final _ctor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Barcode__ctor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(com.google.mlkit.vision.barcode.common.internal.BarcodeSource barcodeSource)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Barcode(
    BarcodeSource barcodeSource,
  ) {
    return Barcode.fromRef(_ctor(barcodeSource.reference).object);
  }

  static final _ctor1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Barcode__ctor1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(com.google.mlkit.vision.barcode.common.internal.BarcodeSource barcodeSource, android.graphics.Matrix matrix)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Barcode.ctor1(
    BarcodeSource barcodeSource,
    jni.JObject matrix,
  ) {
    return Barcode.fromRef(
        _ctor1(barcodeSource.reference, matrix.reference).object);
  }

  static final _getRawBytes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getRawBytes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] getRawBytes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.jbyte> getRawBytes() {
    return const jni.JArrayType(jni.jbyteType())
        .fromRef(_getRawBytes(reference).object);
  }

  static final _getCornerPoints = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Barcode__getCornerPoints")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Point[] getCornerPoints()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JObject> getCornerPoints() {
    return const jni.JArrayType(jni.JObjectType())
        .fromRef(_getCornerPoints(reference).object);
  }
}

class $BarcodeType extends jni.JObjType<Barcode> {
  const $BarcodeType();

  @override
  String get signature => r"Lcom/google/mlkit/vision/barcode/common/Barcode;";

  @override
  Barcode fromRef(jni.JObjectPtr ref) => Barcode.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BarcodeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BarcodeType) && other is $BarcodeType;
  }
}

/// from: com.google.mlkit.vision.barcode.common.internal.BarcodeSource
class BarcodeSource extends jni.JObject {
  @override
  late final jni.JObjType<BarcodeSource> $type = type;

  BarcodeSource.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $BarcodeSourceType();
  static final _getFormat = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getFormat")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getFormat()
  int getFormat() {
    return _getFormat(reference).integer;
  }

  static final _getValueType = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getValueType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getValueType()
  int getValueType() {
    return _getValueType(reference).integer;
  }

  static final _getBoundingBox = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getBoundingBox")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.Rect getBoundingBox()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getBoundingBox() {
    return const jni.JObjectType().fromRef(_getBoundingBox(reference).object);
  }

  static final _getCalendarEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getCalendarEvent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.mlkit.vision.barcode.common.Barcode$CalendarEvent getCalendarEvent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getCalendarEvent() {
    return const jni.JObjectType().fromRef(_getCalendarEvent(reference).object);
  }

  static final _getContactInfo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getContactInfo")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.mlkit.vision.barcode.common.Barcode$ContactInfo getContactInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getContactInfo() {
    return const jni.JObjectType().fromRef(_getContactInfo(reference).object);
  }

  static final _getDriverLicense = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getDriverLicense")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.mlkit.vision.barcode.common.Barcode$DriverLicense getDriverLicense()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getDriverLicense() {
    return const jni.JObjectType().fromRef(_getDriverLicense(reference).object);
  }

  static final _getEmail = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getEmail")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.mlkit.vision.barcode.common.Barcode$Email getEmail()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getEmail() {
    return const jni.JObjectType().fromRef(_getEmail(reference).object);
  }

  static final _getGeoPoint = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getGeoPoint")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.mlkit.vision.barcode.common.Barcode$GeoPoint getGeoPoint()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getGeoPoint() {
    return const jni.JObjectType().fromRef(_getGeoPoint(reference).object);
  }

  static final _getPhone = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getPhone")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.mlkit.vision.barcode.common.Barcode$Phone getPhone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getPhone() {
    return const jni.JObjectType().fromRef(_getPhone(reference).object);
  }

  static final _getSms = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getSms")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.mlkit.vision.barcode.common.Barcode$Sms getSms()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getSms() {
    return const jni.JObjectType().fromRef(_getSms(reference).object);
  }

  static final _getUrl = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getUrl")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.mlkit.vision.barcode.common.Barcode$UrlBookmark getUrl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getUrl() {
    return const jni.JObjectType().fromRef(_getUrl(reference).object);
  }

  static final _getWifi = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getWifi")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.mlkit.vision.barcode.common.Barcode$WiFi getWifi()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getWifi() {
    return const jni.JObjectType().fromRef(_getWifi(reference).object);
  }

  static final _getDisplayValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getDisplayValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getDisplayValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getDisplayValue() {
    return const jni.JStringType().fromRef(_getDisplayValue(reference).object);
  }

  static final _getRawValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getRawValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getRawValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getRawValue() {
    return const jni.JStringType().fromRef(_getRawValue(reference).object);
  }

  static final _getRawBytes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getRawBytes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract byte[] getRawBytes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.jbyte> getRawBytes() {
    return const jni.JArrayType(jni.jbyteType())
        .fromRef(_getRawBytes(reference).object);
  }

  static final _getCornerPoints = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("BarcodeSource__getCornerPoints")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.Point[] getCornerPoints()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JObject> getCornerPoints() {
    return const jni.JArrayType(jni.JObjectType())
        .fromRef(_getCornerPoints(reference).object);
  }
}

class $BarcodeSourceType extends jni.JObjType<BarcodeSource> {
  const $BarcodeSourceType();

  @override
  String get signature =>
      r"Lcom/google/mlkit/vision/barcode/common/internal/BarcodeSource;";

  @override
  BarcodeSource fromRef(jni.JObjectPtr ref) => BarcodeSource.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BarcodeSourceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BarcodeSourceType) &&
        other is $BarcodeSourceType;
  }
}

/// from: com.google.android.gms.tasks.Task
class Task<$TResult extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<Task<$TResult>> $type = type(TResult);

  final jni.JObjType<$TResult> TResult;

  Task.fromRef(
    this.TResult,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static $TaskType<$TResult> type<$TResult extends jni.JObject>(
    jni.JObjType<$TResult> TResult,
  ) {
    return $TaskType(
      TResult,
    );
  }

  static final _addOnCanceledListener = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnCanceledListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task addOnCanceledListener(com.google.android.gms.tasks.OnCanceledListener onCanceledListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnCanceledListener(
    jni.JObject onCanceledListener,
  ) {
    return $TaskType(TResult).fromRef(
        _addOnCanceledListener(reference, onCanceledListener.reference).object);
  }

  static final _addOnCanceledListener1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnCanceledListener1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task addOnCanceledListener(android.app.Activity activity, com.google.android.gms.tasks.OnCanceledListener onCanceledListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnCanceledListener1(
    jni.JObject activity,
    jni.JObject onCanceledListener,
  ) {
    return $TaskType(TResult).fromRef(_addOnCanceledListener1(
            reference, activity.reference, onCanceledListener.reference)
        .object);
  }

  static final _addOnCanceledListener2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnCanceledListener2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task addOnCanceledListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnCanceledListener onCanceledListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnCanceledListener2(
    jni.JObject executor,
    jni.JObject onCanceledListener,
  ) {
    return $TaskType(TResult).fromRef(_addOnCanceledListener2(
            reference, executor.reference, onCanceledListener.reference)
        .object);
  }

  static final _addOnCompleteListener = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnCompleteListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener onCompleteListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnCompleteListener(
    jni.JObject onCompleteListener,
  ) {
    return $TaskType(TResult).fromRef(
        _addOnCompleteListener(reference, onCompleteListener.reference).object);
  }

  static final _addOnCompleteListener1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnCompleteListener1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task addOnCompleteListener(android.app.Activity activity, com.google.android.gms.tasks.OnCompleteListener onCompleteListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnCompleteListener1(
    jni.JObject activity,
    jni.JObject onCompleteListener,
  ) {
    return $TaskType(TResult).fromRef(_addOnCompleteListener1(
            reference, activity.reference, onCompleteListener.reference)
        .object);
  }

  static final _addOnCompleteListener2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnCompleteListener2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task addOnCompleteListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnCompleteListener onCompleteListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnCompleteListener2(
    jni.JObject executor,
    jni.JObject onCompleteListener,
  ) {
    return $TaskType(TResult).fromRef(_addOnCompleteListener2(
            reference, executor.reference, onCompleteListener.reference)
        .object);
  }

  static final _addOnFailureListener = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnFailureListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.android.gms.tasks.Task addOnFailureListener(com.google.android.gms.tasks.OnFailureListener onFailureListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnFailureListener(
    jni.JObject onFailureListener,
  ) {
    return $TaskType(TResult).fromRef(
        _addOnFailureListener(reference, onFailureListener.reference).object);
  }

  static final _addOnFailureListener1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnFailureListener1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.android.gms.tasks.Task addOnFailureListener(android.app.Activity activity, com.google.android.gms.tasks.OnFailureListener onFailureListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnFailureListener1(
    jni.JObject activity,
    jni.JObject onFailureListener,
  ) {
    return $TaskType(TResult).fromRef(_addOnFailureListener1(
            reference, activity.reference, onFailureListener.reference)
        .object);
  }

  static final _addOnFailureListener2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnFailureListener2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.android.gms.tasks.Task addOnFailureListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnFailureListener onFailureListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnFailureListener2(
    jni.JObject executor,
    jni.JObject onFailureListener,
  ) {
    return $TaskType(TResult).fromRef(_addOnFailureListener2(
            reference, executor.reference, onFailureListener.reference)
        .object);
  }

  static final _addOnSuccessListener = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnSuccessListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.android.gms.tasks.Task addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener onSuccessListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnSuccessListener(
    jni.JObject onSuccessListener,
  ) {
    return $TaskType(TResult).fromRef(
        _addOnSuccessListener(reference, onSuccessListener.reference).object);
  }

  static final _addOnSuccessListener1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnSuccessListener1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.android.gms.tasks.Task addOnSuccessListener(android.app.Activity activity, com.google.android.gms.tasks.OnSuccessListener onSuccessListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnSuccessListener1(
    jni.JObject activity,
    jni.JObject onSuccessListener,
  ) {
    return $TaskType(TResult).fromRef(_addOnSuccessListener1(
            reference, activity.reference, onSuccessListener.reference)
        .object);
  }

  static final _addOnSuccessListener2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__addOnSuccessListener2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.android.gms.tasks.Task addOnSuccessListener(java.util.concurrent.Executor executor, com.google.android.gms.tasks.OnSuccessListener onSuccessListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TResult> addOnSuccessListener2(
    jni.JObject executor,
    jni.JObject onSuccessListener,
  ) {
    return $TaskType(TResult).fromRef(_addOnSuccessListener2(
            reference, executor.reference, onSuccessListener.reference)
        .object);
  }

  static final _continueWith = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__continueWith")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task continueWith(com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TContinuationResult>
      continueWith<$TContinuationResult extends jni.JObject>(
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult)
        .fromRef(_continueWith(reference, continuation.reference).object);
  }

  static final _continueWith1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__continueWith1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task continueWith(java.util.concurrent.Executor executor, com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TContinuationResult>
      continueWith1<$TContinuationResult extends jni.JObject>(
    jni.JObject executor,
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(
        _continueWith1(reference, executor.reference, continuation.reference)
            .object);
  }

  static final _continueWithTask = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__continueWithTask")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task continueWithTask(com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TContinuationResult>
      continueWithTask<$TContinuationResult extends jni.JObject>(
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult)
        .fromRef(_continueWithTask(reference, continuation.reference).object);
  }

  static final _continueWithTask1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__continueWithTask1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task continueWithTask(java.util.concurrent.Executor executor, com.google.android.gms.tasks.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TContinuationResult>
      continueWithTask1<$TContinuationResult extends jni.JObject>(
    jni.JObject executor,
    jni.JObject continuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(_continueWithTask1(
            reference, executor.reference, continuation.reference)
        .object);
  }

  static final _onSuccessTask = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__onSuccessTask")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task onSuccessTask(com.google.android.gms.tasks.SuccessContinuation successContinuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TContinuationResult>
      onSuccessTask<$TContinuationResult extends jni.JObject>(
    jni.JObject successContinuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(
        _onSuccessTask(reference, successContinuation.reference).object);
  }

  static final _onSuccessTask1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__onSuccessTask1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.android.gms.tasks.Task onSuccessTask(java.util.concurrent.Executor executor, com.google.android.gms.tasks.SuccessContinuation successContinuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Task<$TContinuationResult>
      onSuccessTask1<$TContinuationResult extends jni.JObject>(
    jni.JObject executor,
    jni.JObject successContinuation, {
    required jni.JObjType<$TContinuationResult> TContinuationResult,
  }) {
    return $TaskType(TContinuationResult).fromRef(_onSuccessTask1(
            reference, executor.reference, successContinuation.reference)
        .object);
  }

  static final _getException = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Task__getException")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Exception getException()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getException() {
    return const jni.JObjectType().fromRef(_getException(reference).object);
  }

  static final _getResult = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Task__getResult")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract TResult getResult()
  /// The returned object must be deleted after use, by calling the `delete` method.
  $TResult getResult() {
    return TResult.fromRef(_getResult(reference).object);
  }

  static final _getResult1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Task__getResult1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract TResult getResult(java.lang.Class class)
  /// The returned object must be deleted after use, by calling the `delete` method.
  $TResult getResult1<$X extends jni.JObject>(
    jni.JObject class0, {
    required jni.JObjType<$X> X,
  }) {
    return TResult.fromRef(_getResult1(reference, class0.reference).object);
  }

  static final _ctor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Task__ctor")
          .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Task({
    required jni.JObjType<$TResult> TResult,
  }) {
    return Task.fromRef(TResult, _ctor().object);
  }

  static final _isCanceled = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Task__isCanceled")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isCanceled()
  bool isCanceled() {
    return _isCanceled(reference).boolean;
  }

  static final _isComplete = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Task__isComplete")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isComplete()
  bool isComplete() {
    return _isComplete(reference).boolean;
  }

  static final _isSuccessful = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Task__isSuccessful")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isSuccessful()
  bool isSuccessful() {
    return _isSuccessful(reference).boolean;
  }
}

class $TaskType<$TResult extends jni.JObject>
    extends jni.JObjType<Task<$TResult>> {
  final jni.JObjType<$TResult> TResult;

  const $TaskType(
    this.TResult,
  );

  @override
  String get signature => r"Lcom/google/android/gms/tasks/Task;";

  @override
  Task<$TResult> fromRef(jni.JObjectPtr ref) => Task.fromRef(TResult, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($TaskType, TResult);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TaskType<$TResult>) &&
        other is $TaskType<$TResult> &&
        TResult == other.TResult;
  }
}
